#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dropboxemulator:server');
var http = require('http');
const fs = require('fs');
var s3 = require('../S3');
var constants = require('../Constants');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8806');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  startFileWatcher();
    //  s3.uploadToS3('/home/waiphyo/Pictures/', 'AmISafeHere.png');
}

// watches files in the directory described by dir
function startFileWatcher() {

    fs.watch(constants.FOLDER, function (event, filename) {
        console.log('event is: ' + event);
        if (filename) {
            console.log('filename provided: ' + filename);
            // if the event is rename, it means the the file is deleted, created, or renamed
            if(event == 'rename') {
                if(fs.existsSync(constants.FOLDER + filename)) {
                    console.log('file has been created or renamed');
                    s3.uploadToS3(constants.FOLDER, filename);
                } else {
                    console.log('file has been deleted');
                    s3.deleteObject(filename);
                }
            } else {
                console.log('file has been changed');
                s3.uploadToS3(constants.FOLDER, filename);
            }
        } else {
            console.log('filename not provided');
        }
    });
}